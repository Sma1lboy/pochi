name: "pochi GitHub Action (Development)"
description: "Run pochi AI assistant in GitHub Actions workflows - Development Version"
branding:
  icon: "code"
  color: "orange"

inputs:
  model:
    description: "The AI model to use for pochi tasks"
    required: false

  # Development-specific inputs
  source_repo:
    description: "Source repository to clone for pochi CLI (format: owner/repo)"
    required: false
    default: "Sma1lboy/pochi"

  source_ref:
    description: "Git reference (branch/tag/commit) to checkout"
    required: false
    default: "main"

  dev_mode:
    description: "Enable development mode with verbose logging"
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Install bun
      shell: bash
      run: |
        if ! curl -fsSL https://bun.com/install | bash > /dev/null 2>&1; then
          echo "Error: Failed to install bun"
          exit 1
        fi
        echo "$HOME/.bun/bin" >> $GITHUB_PATH

    - name: Install dependencies
      shell: bash
      run: |
        cd ${GITHUB_ACTION_PATH}
        if ! bun install --frozen-lockfile --silent; then
          echo "Error: Failed to install dependencies"
          exit 1
        fi

    - name: Setup initial reaction and progress comment
      shell: bash
      run: bun ${GITHUB_ACTION_PATH}/src/preprocess-action.ts
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Build and install pochi CLI from development source
      shell: bash
      run: |
        # Development mode logging
        if [ "${{ inputs.dev_mode }}" = "true" ]; then
          echo "ðŸ”§ Development Mode Enabled"
          echo "ðŸ“¦ Source Repository: ${{ inputs.source_repo }}"
          echo "ðŸŒ¿ Source Reference: ${{ inputs.source_ref }}"
          set -x
        fi

        # Clone the specified repository and reference
        REPO_URL="https://github.com/${{ inputs.source_repo }}.git"
        echo "Cloning from: $REPO_URL (ref: ${{ inputs.source_ref }})"

        if ! git clone --depth 1 --branch "${{ inputs.source_ref }}" "$REPO_URL" /tmp/pochi-source; then
          echo "Error: Failed to clone pochi repository from $REPO_URL"
          echo "Trying to clone without specifying branch..."
          if ! git clone "$REPO_URL" /tmp/pochi-source; then
            echo "Error: Failed to clone repository completely"
            exit 1
          fi
          cd /tmp/pochi-source
          git checkout "${{ inputs.source_ref }}" || {
            echo "Error: Failed to checkout ref ${{ inputs.source_ref }}"
            exit 1
          }
          cd -
        fi

        cd /tmp/pochi-source

        # Install dependencies and build CLI
        echo "Installing dependencies..."
        if ! bun install --frozen-lockfile; then
          echo "Error: Failed to install pochi dependencies"
          exit 1
        fi

        # Build CLI from packages/cli directory
        echo "Building CLI..."
        cd packages/cli
        if ! bun run build; then
          echo "Error: Failed to build pochi CLI"
          exit 1
        fi
        cd ../..

        # Create pochi bin directory
        mkdir -p "$HOME/.pochi/bin"

        # Copy the built CLI binary
        if ! cp packages/cli/dist/pochi "$HOME/.pochi/bin/pochi"; then
          echo "Error: Failed to copy pochi binary"
          exit 1
        fi

        # Make it executable
        chmod +x "$HOME/.pochi/bin/pochi"

        # Development mode: show version info
        if [ "${{ inputs.dev_mode }}" = "true" ]; then
          echo "ðŸŽ¯ Built pochi CLI version:"
          "$HOME/.pochi/bin/pochi" --version || echo "Version check failed"

          echo "ðŸ“‹ Git info:"
          git log --oneline -3 || echo "Git log failed"
        fi

        # Install ripgrep
        if ! curl -sLO 'https://github.com/BurntSushi/ripgrep/releases/download/14.1.1/ripgrep-14.1.1-x86_64-unknown-linux-musl.tar.gz'; then
          echo "Error: Failed to download ripgrep"
          exit 1
        fi
        if ! tar -xzf ripgrep-14.1.1-x86_64-unknown-linux-musl.tar.gz > /dev/null 2>&1; then
          echo "Error: Failed to extract ripgrep"
          exit 1
        fi
        if ! mv ripgrep-14.1.1-x86_64-unknown-linux-musl/rg "$HOME/.pochi/bin/"; then
          echo "Error: Failed to move ripgrep binary"
          exit 1
        fi
        rm -rf ripgrep-14.1.1-x86_64-unknown-linux-musl*

        # Clean up source directory
        rm -rf /tmp/pochi-source

        echo "$HOME/.pochi/bin" >> $GITHUB_PATH

    - name: Config Git
      shell: bash
      run: |
        git config --global user.email "noreply@getpochi.com"
        git config --global user.name "Pochi"

    - name: Run pochi GitHub Action
      shell: bash
      run: |
        if [ -n "${{ inputs.model }}" ]; then
          export POCHI_MODEL="${{ inputs.model }}"
        fi

        # Development mode environment
        if [ "${{ inputs.dev_mode }}" = "true" ]; then
          export POCHI_GITHUB_ACTION_DEBUG=1
        fi

        bun ${GITHUB_ACTION_PATH}/src/index.ts
      env:
        GITHUB_TOKEN: ${{ github.token }}
        POCHI_REMOTE_ENV: 1
        PROGRESS_COMMENT_ID: ${{ env.PROGRESS_COMMENT_ID }}
        EYES_REACTION_ID: ${{ env.EYES_REACTION_ID }}