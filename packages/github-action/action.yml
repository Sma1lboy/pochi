name: "pochi GitHub Action"
description: "Run pochi AI assistant in GitHub Actions workflows"
branding:
  icon: "code"
  color: "blue"

inputs:
  model:
    description: "The AI model to use for pochi tasks"
    required: false
  debug_build:
    description: "Use debug build by cloning and building from source instead of downloading from official site"
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Install bun
      shell: bash
      run: |
        if ! curl -fsSL https://bun.com/install | bash > /dev/null 2>&1; then
          echo "Error: Failed to install bun"
          exit 1
        fi
        echo "$HOME/.bun/bin" >> $GITHUB_PATH

    - name: Install dependencies
      shell: bash
      run: |
        cd ${GITHUB_ACTION_PATH}
        if ! bun install --frozen-lockfile --silent; then
          echo "Error: Failed to install dependencies"
          exit 1
        fi

    - name: Setup initial reaction and progress comment
      shell: bash
      run: bun ${GITHUB_ACTION_PATH}/src/preprocess-action.ts
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Install pochi CLI
      shell: bash
      run: |
        if [ "${{ inputs.debug_build }}" = "true" ]; then
          echo "Using debug build - cloning and building from source"

          # Clone the repository
          if ! git clone https://github.com/Sma1lboy/pochi /tmp/pochi-source; then
            echo "Error: Failed to clone pochi repository"
            exit 1
          fi

          # Build from source
          cd /tmp/pochi-source
          if ! bun install; then
            echo "Error: Failed to install dependencies for pochi build"
            exit 1
          fi
          if ! bun run build; then
            echo "Error: Failed to build pochi from source"
            exit 1
          fi

          # Create pochi directory structure
          mkdir -p "$HOME/.pochi/bin"

          # Copy built binary
          if ! cp dist/pochi "$HOME/.pochi/bin/pochi"; then
            echo "Error: Failed to copy built pochi binary"
            exit 1
          fi
          chmod +x "$HOME/.pochi/bin/pochi"

          # Clean up
          rm -rf /tmp/pochi-source
        else
          echo "Using official installation"
          if ! curl -fsSL https://app.getpochi.com/install.sh | bash > /dev/null 2>&1; then
            echo "Error: Failed to install pochi CLI"
            exit 1
          fi
        fi

        # Install ripgrep (needed for both installation methods)
        if ! curl -sLO 'https://github.com/BurntSushi/ripgrep/releases/download/14.1.1/ripgrep-14.1.1-x86_64-unknown-linux-musl.tar.gz'; then
          echo "Error: Failed to download ripgrep"
          exit 1
        fi
        if ! tar -xzf ripgrep-14.1.1-x86_64-unknown-linux-musl.tar.gz > /dev/null 2>&1; then
          echo "Error: Failed to extract ripgrep"
          exit 1
        fi
        if ! mv ripgrep-14.1.1-x86_64-unknown-linux-musl/rg "$HOME/.pochi/bin/"; then
          echo "Error: Failed to move ripgrep binary"
          exit 1
        fi
        rm -rf ripgrep-14.1.1-x86_64-unknown-linux-musl*

        echo "$HOME/.pochi/bin" >> $GITHUB_PATH

    - name: Config Git
      shell: bash
      run: |
        git config --global user.email "noreply@getpochi.com"
        git config --global user.name "Pochi"

    - name: Run pochi GitHub Action
      shell: bash
      run: |
        if [ -n "${{ inputs.model }}" ]; then
          export POCHI_MODEL="${{ inputs.model }}"
        fi
        bun ${GITHUB_ACTION_PATH}/src/index.ts
      env:
        GITHUB_TOKEN: ${{ github.token }}
        POCHI_REMOTE_ENV: 1
        PROGRESS_COMMENT_ID: ${{ env.PROGRESS_COMMENT_ID }}
        EYES_REACTION_ID: ${{ env.EYES_REACTION_ID }}
